buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://dl.bintray.com/hmtmcse/maven/" }
        maven { url "https://repo.maven.apache.org/maven2/" }
    }
    dependencies {
        classpath 'org.ajoberstar.grgit:grgit-core:3.1.1'
    }
}

def projectDependencies = [
        [
                "name"        : "None Spring Library",
                "destination" : "$dependencySource" + "dev-library/",
                "dependencies": [
                        "pf-java-object-copier": "https://github.com/problemfighter/pf-java-object-copier.git",
                ]
        ],
        [
                "name"        : "Spring Boot Library",
                "destination" : "$dependencySource" + "dev-module/",
                "dependencies": [
                        "pfspring-common"  : "https://github.com/problemfighter/pfspring-common.git",
                        "pfspring-rest-api": "https://github.com/problemfighter/pfspring-rest-api.git",
                        "pfspring-multi-tenant": "https://github.com/problemfighter/pfspring-multi-tenant.git",
                        "pfspring-security": "https://github.com/problemfighter/pfspring-security.git",
                        "pfspring-acl-validator": "https://github.com/problemfighter/pfspring-acl-validator.git",
                ]
        ]
]


void cloneProject(List projectList) {
    String destinationPath = ""
    projectList.each { Map dependencyMap ->
        destinationPath = dependencyMap.destination
        println("Now Cloning ${dependencyMap.name}")
        dependencyMap.dependencies.each { name, url ->
            println("------------------------------------------------------------------------------------------")
            def destination = file(destinationPath + name)
            try {
                println("Cloning Project ${name}")
                org.ajoberstar.grgit.Grgit.clone(dir: destination, uri: url)
            } catch (Exception e) {
                println(e.getMessage())
            }
            println("------------------------------------------------------------------------------------------\n")
        }
    }
}

task resolveSourceDependencies {
    doLast {
        if (isSourceDevelopment.equals("true")) {
            cloneProject(projectDependencies)
        } else {
            println "Source Development not enabled, Please check the gradle.properties file."
        }
    }
}

def testProject = [
        [
                "name"        : "Spring Boot Test Library",
                "destination" : "$applicationPath",
                "dependencies": [
                        "module": "https://github.com/problemfighter/pfspring-feature-test-module.git",
                ]
        ]
]

task cloneFeatureTestModule {
    doLast {
        cloneProject(testProject)
    }
}


String testFeature = System.getProperty("test-feature")
if (testFeature && testFeature.equals("yes")) {
    println("------------- Cloning Test Project -------------")
    build.dependsOn cloneStudentSubProject
}


def uiProject = [
        [
                "name"        : "UI Base Library",
                "destination" : "./",
                "dependencies": [
                        "app-ui": "https://github.com/problemfighter/react-mui-app.git",
                ]
        ],
        [
                "name"        : "UI Base Library Dependency",
                "destination" : "app-ui/dependency-source/",
                "dependencies": [
                        "react-mui-ui": "https://github.com/hmtmcse/react-mui-ui.git",
                        "tm-react": "https://github.com/hmtmcse/tm-react.git",
                ]
        ]
]

task configureUIProject {
    doLast {
        cloneProject(uiProject)
    }
}

